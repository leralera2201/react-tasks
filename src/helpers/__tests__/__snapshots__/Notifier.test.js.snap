// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Notifier helpers error toast 1`] = `
<Fragment>
  <Header />
  <ToastContainer
    autoClose={5000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    role="alert"
    rtl={false}
    transition={[Function]}
  />
  <div
    className="wrapper"
  >
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/create"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id/update"
      />
    </Switch>
  </div>
  <Footer />
</Fragment>
`;

exports[`Testing Notifier helpers info toast 1`] = `
<Fragment>
  <Header />
  <ToastContainer
    autoClose={5000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    role="alert"
    rtl={false}
    transition={[Function]}
  />
  <div
    className="wrapper"
  >
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/create"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id/update"
      />
    </Switch>
  </div>
  <Footer />
</Fragment>
`;

exports[`Testing Notifier helpers secondary toast 1`] = `
<Fragment>
  <Header />
  <ToastContainer
    autoClose={5000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    role="alert"
    rtl={false}
    transition={[Function]}
  />
  <div
    className="wrapper"
  >
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/create"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id/update"
      />
    </Switch>
  </div>
  <Footer />
</Fragment>
`;

exports[`Testing Notifier helpers success toast 1`] = `
<Fragment>
  <Header />
  <ToastContainer
    autoClose={5000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    role="alert"
    rtl={false}
    transition={[Function]}
  />
  <div
    className="wrapper"
  >
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/create"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id/update"
      />
    </Switch>
  </div>
  <Footer />
</Fragment>
`;

exports[`Testing Notifier helpers warning toast 1`] = `
<Fragment>
  <Header />
  <ToastContainer
    autoClose={5000}
    closeButton={[Function]}
    closeOnClick={true}
    draggable={true}
    draggablePercent={80}
    hideProgressBar={false}
    newestOnTop={false}
    pauseOnFocusLoss={true}
    pauseOnHover={true}
    position="top-right"
    role="alert"
    rtl={false}
    transition={[Function]}
  />
  <div
    className="wrapper"
  >
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/create"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id"
      />
      <Route
        component={
          Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": [Function],
            "compare": null,
            "type": [Function],
          }
        }
        exact={true}
        path="/books/:id/update"
      />
    </Switch>
  </div>
  <Footer />
</Fragment>
`;
